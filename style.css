*,
*::before,
*::after {
  padding: 0;
  margin: 0 auto;
  box-sizing: border-box;
}

body {
  background-color: #eee;
  min-height: 100vh;
  display: flex;
          justify-content: center;
          align-items: center;
}
/* Sets up a 400px by 400px container with a white border */
/* Centers its content using flexbox */
/* Defines a perspective for 3D-transformed children, with the vanishing point set at the top right */
.container {
  width: 400px;
  height: 400px;
  border: 2px solid white;
  border-radius: 4px;
  display: flex;
          justify-content: center;
          align-items: center;
          perspective: 800px;
          perspective-origin: top right;
}

/* Positions the cube relative to its parent */
/* Specifies the size of the cube */
/* Applies 3D transform styles for child elements */
/* Animates the cube with a continuous rotation in 3D space */
.cube {
  position: relative;
  width: 200px;
  height: 200px;
          transform-style: preserve-3d;
          animation: cubeRotate 10s linear infinite;
}

/* Defines the animation sequence for the cube's rotation */
/* Rotates the cube around the Y and Z axes through 360 degrees, and around the X axis through 720 degrees, creating a complex spinning effect */
@keyframes cubeRotate {
  from {
            transform: rotateY(0deg) rotateX(720deg) rotateZ(0deg);
  }
  to {
            transform: rotateY(360deg) rotateX(0deg) rotateZ(360deg);
  }
}

/* Positions each side of the cube absolutely relative to the cube */
/* Sets the size to fill the entire cube */
/* Applies a slight transparency and a white border for visual effect */
.side {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0.9;
  border: 2px solid white;
}

/* Each applies a background image and sizes it to cover the entire face of the cube */
/* Positions each face of the cube correctly in 3D space using transformations */
.front {
  background-image: url(images/face.png);
  background-size: cover;
          transform: translateZ(100px);
}

.back {
  background-image: url(images/back.png);
  background-size: cover;
          transform: translateZ(-100px);
}

.left {
  background-image: url(images/side.png);
  background-size: cover;
          transform: rotateY(90deg) translateZ(100px);
}

.right {
  background-image: url(images/side2.png);
  background-size: cover;
          transform: rotateY(-90deg) translateZ(100px);
}

.top {
  background-image: url(images/top.png);
  background-size: cover;
          transform: rotateX(90deg) translateZ(100px);
}

.bottom {
  background-image: url(images/bottom.png);
  background-size: cover;
          transform: rotateX(-90deg) translateZ(100px);
}

/* Sets up the container for the rotating text */
/* Defines a perspective and sets the size, necessary for the 3D effect */
.text {
  perspective: 450px;
  width: 200px; /* Adjust as needed */
  height: 200px; /* Adjust as needed */
  position: relative;
}

/* setting up the div for rotation
this holds the individual letters, but as we want all letters to rotate w/ respect
to an origin, the div is rotated as it's 'center' is our origin */
.rotate {
  width: 100%;
  height: 100%;
  position: absolute;
  transform-style: preserve-3d;
  animation: rotate 10s linear infinite reverse;
}

/* this selects every h1 element within the rotate div and makes them
absolute so we can position them overlapping as to push them out equally from the origin */
.rotate h1 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: 0 100px; /* Adjust distance to center */
  transform: translate(-50%, -50%) rotateY(0deg);
}

/* here, we do a keyframe which rotates the div holding the h1 elems
in a full rotation */
@keyframes rotate {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(360deg);
  }
}

/* here we move out the letter 150px into the Z axis, then rotate them a certain degree
so when they are rotated, it forms a carousel effect where the letter is facing the reader
when it revolves around to them */
.rotate h1:nth-child(1) { transform: translate(-50%, -50%) rotateY(0deg) translateZ(150px); }
.rotate h1:nth-child(2) { transform: translate(-50%, -50%) rotateY(27.7deg) translateZ(150px); }
.rotate h1:nth-child(3) { transform: translate(-50%, -50%) rotateY(55.4deg) translateZ(150px); }
.rotate h1:nth-child(4) { transform: translate(-50%, -50%) rotateY(83.1deg) translateZ(150px); }
.rotate h1:nth-child(5) { transform: translate(-50%, -50%) rotateY(110.8deg) translateZ(150px); }
.rotate h1:nth-child(6) { transform: translate(-50%, -50%) rotateY(138.5deg) translateZ(150px); }
.rotate h1:nth-child(7) { transform: translate(-50%, -50%) rotateY(166.2deg) translateZ(150px); }
.rotate h1:nth-child(8) { transform: translate(-50%, -50%) rotateY(193.9deg) translateZ(150px); }
.rotate h1:nth-child(9) { transform: translate(-50%, -50%) rotateY(221.6deg) translateZ(150px); }
.rotate h1:nth-child(10) { transform: translate(-50%, -50%) rotateY(249.3deg) translateZ(150px); }
.rotate h1:nth-child(11) { transform: translate(-50%, -50%) rotateY(277deg) translateZ(150px); }
.rotate h1:nth-child(12) { transform: translate(-50%, -50%) rotateY(304.7deg) translateZ(150px); }
.rotate h1:nth-child(13) { transform: translate(-50%, -50%) rotateY(332.4deg) translateZ(150px); }